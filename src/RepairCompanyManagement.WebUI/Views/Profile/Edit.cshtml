@model RepairCompanyManagement.WebUI.Models.EditProfileViewModel
@{
    ViewBag.Title = "Edit your profiles";
    var isCustomer = User.IsInRole(RepairCompanyManagement.WebUI.Identity.IdentityConstants.CustomerRole);
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("Edit", "Profile", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="form-group">
        Surname
        <div class="form-group col-xs-4">
            @Html.TextBoxFor(m => m.Surname, new { @class = "form-control", placeholder = "Surname", value = Model.Surname })
            <p class="text-danger">@Html.ValidationMessageFor(m => m.Surname)</p>
        </div>
    </div>
    <div class="form-group">
        First Name
        <div class="form-group col-xs-4">
            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "First name" })
            <p class="text-danger">@Html.ValidationMessageFor(m => m.FirstName)</p>
        </div>
    </div>
    if(isCustomer)
    {
    <div class="form-group">
        Balance
        <div class="form-group col-xs-4">
            @Html.TextBoxFor(m => m.Balance, new { @class = "form-control", placeholder = "Balance" })
            <p class="text-danger">@Html.ValidationMessageFor(m => m.Balance)</p>
        </div>
    </div>
    }
    <div class="form-group">
        Email
        <div class="form-group col-xs-4">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email" })
            <p class="text-danger">@Html.ValidationMessageFor(m => m.Email)</p>
        </div>
    </div>
<div class="form-group">
    <div class="col-md-offset-2 col-md-10">
        <input type="submit" value="Save" class="btn btn-primary" />
    </div>
</div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    // переопределение валидации на стороне клиента
    $.validator.methods.range = function (value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    }
 
    $.validator.methods.number = function (value, element) {
        return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
    }
    </script>
}